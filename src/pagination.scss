@use "sass:math";
@use "@bardoui/termeh/termeh.scss" as T;

$-colors: T.var("pagination", "colors", ());
$-background: T.color("background");
$-foreground: T.color("foreground");
$-decorator: T.var("decorator", "size", 2px);

.v-pagination {
    display: flex;
    flex-direction: row;
    align-items: center;
    justify-content: center;
    user-select: none;
    overflow: hidden;
    overflow-x: auto;
    direction: ltr;
    padding: T.gap("element");

    > .page {
        display: block;
        box-sizing: content-box;
        min-width: 1em;
        height: 1em;
        line-height: 1em;
        text-align: center;
        margin: 0 $-decorator;
        padding: math.div(T.gap("element"), 2);
        border-radius: T.var("radius", "normal");
        transition: all T.transition-params();

        > .arrow {
            display: inline-block;
            border: solid currentColor;
            border-width: 0 $-decorator $-decorator 0;
            padding: $-decorator;

            &.is-right {
                transform: rotate(-45deg);
            }

            &.is-left {
                transform: rotate(135deg);
            }
        }

        &.is-disabled {
            @include T.locked();
            background: none !important;
            color: T.muted($-background, $-foreground) !important;

            > .arrow {
                border-color: T.muted($-background, $-foreground) !important;
            }
        }

        &:not(.is-disabled):not(.is-active) {
            cursor: pointer;

            &:hover {
                $bg: T.muted($-background, T.color("shade"), false);
                background-color: $bg;
                color: T.readable($bg, $-foreground);
            }
        }

        &:not(.is-disabled).is-active {
            background: T.color("shade");
            color: T.readable(T.color("shade"), $-foreground);
        }
    }

    &:not(.is-flat) {
        background: T.color("input");
        border: 1px solid T.color("separator");
        border-radius: T.var("radius", "normal");
        padding: T.el-pad(T.gap("element"));
    }

    &.is-disabled {
        @include T.locked();

        > .page {
            color: T.muted($-background, $-foreground) !important;

            &.is-active {
                background: T.disabled($-background) !important;
                color: T.muted($-background, $-foreground) !important;
            }

            > .arrow {
                color: T.muted($-background, $-foreground) !important;
            }
        }
    }

    &.is-rounded {
        border-radius: T.var("radius", "rounded");
        > .page {
            border-radius: T.var("radius", "rounded");
        }
    }

    @each $name, $color in T.colors($-colors) {
        &.is-#{$name} {
            > .page {
                &:not(.is-disabled).is-active {
                    background: $color;
                    color: T.foreground($color);
                }
            }
        }
    }
}
