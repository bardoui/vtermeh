@use "sass:math";
@use "@bardoui/termeh/termeh.scss" as T;

$-gaps: T.var("choose", "gaps", ());
$-colors: T.var("choose", "colors", ());
$-background: T.color("background");
$-foreground: T.color("foreground");
$-decorator: T.var("decorator", "size", 2px);

.v-choose {
    display: flex;
    flex-direction: row;
    align-items: center;
    user-select: none;
    box-sizing: border-box;
    background: T.color("input");
    border: 1px solid T.color("separator");
    border-radius: T.var("radius", "normal");
    padding: T.el-pad(T.gap("element"));

    > .item {
        display: block;
        flex: 1 1 auto;
        cursor: pointer;
        text-align: center;
        box-sizing: border-box;
        margin: math.div($-decorator, 2);
        padding: T.el-pad(T.gap("element"));
        border-radius: T.var("radius", "normal");
        transition: all T.transition-params();

        &:not(.is-active):hover {
            $bg: T.muted($-background, T.color("shade"), false);
            background-color: $bg;
            color: T.readable($bg, $-foreground);
        }

        &.is-active {
            background: T.color("shade");
            color: T.readable(T.color("shade"), $-foreground);
        }
    }

    &.is-disabled {
        @include T.locked();
        background: T.disabled($-background) !important;
        border-color: T.disabled($-background, true) !important;
        color: T.muted($-background, $-foreground) !important;

        > .item {
            &.is-active {
                background: T.disabled($-background, true) !important;
                color: T.muted($-background, $-foreground) !important;
            }
        }
    }

    &.is-stacked {
        flex-direction: column;
        align-items: stretch;
    }

    @each $name, $gap in T.gaps($-gaps) {
        &.is-#{$name}-gaped {
            padding: T.el-pad($gap);
        }
        &.is-#{$name}-padded > .item {
            padding: T.el-pad($gap);
        }
    }

    @each $name, $color in T.colors($-colors) {
        &.is-#{$name} {
            > .item.is-active {
                background: $color;
                color: T.foreground($color);
            }
        }
    }

    @each $device, $query in T.media-queries() {
        @media #{$query} {
            &.is-#{$device}-stacked {
                flex-direction: column;
                align-items: stretch;
            }
        }
    }
}
